"""RAG crew definition.

This module defines the `RagCrew` class and its factory methods for
creating a retrieval-augmented generation (RAG) agent, task, and crew
using the CrewAI framework.

The crew is configured via YAML files referenced by `agents_config` and
`tasks_config` and can be extended with additional tools.
"""

from crewai import Agent, Crew, Process, Task
from crewai.project import CrewBase, agent, crew, task
from crewai.agents.agent_builder.base_agent import BaseAgent
from typing import List
from crewai_tools import SerperDevTool
from rag_flow.tools.custom_tool import FetchContextsOutput

# If you want to run a snippet of code before or after the crew starts,
# you can use the @before_kickoff and @after_kickoff decorators
# https://docs.crewai.com/concepts/crews#example-crew-class-with-decorators


@CrewBase
class RagCrew:
    """Crew to orchestrate a simple RAG workflow.

    This class exposes factory methods to create:

    - **rag_agent**: An `Agent` configured from YAML.
    - **rag_task**: A `Task` that uses search and context-fetch tools.
    - **crew**: A `Crew` that sequences the agent and task.

    Attributes
    ----------
    agents : List[BaseAgent]
        Collection of agents auto-generated by the `@agent` decorator.
    tasks : List[Task]
        Collection of tasks auto-generated by the `@task` decorator.
    agents_config : str
        Path to the YAML file containing agent configuration.
    tasks_config : str
        Path to the YAML file containing task configuration.
    """

    agents: List[BaseAgent]
    tasks: List[Task]

    # Learn more about YAML configuration files here:
    # Agents: https://docs.crewai.com/concepts/agents#yaml-configuration-recommended
    # Tasks: https://docs.crewai.com/concepts/tasks#yaml-configuration-recommended
    agents_config = "config/agents.yaml"
    tasks_config = "config/tasks.yaml"

    # If you would lik to add tools to your crew, you can learn more about it here:
    # https://docs.crewai.com/concepts/agents#agent-tools
    @agent
    def rag_agent(self) -> Agent:
        """Create the RAG agent from YAML configuration.

        Returns
        -------
        Agent
            The agent instance configured under the key ``"rag_agent"``
            in `agents_config`.
        """
        return Agent(
            config=self.agents_config["rag_agent"],  # type: ignore[index]
        )

    # To learn more about structured task outputs,
    # task dependencies, and task callbacks, check out the documentation:
    # https://docs.crewai.com/concepts/tasks#overview-of-a-task
    @task
    def rag_task(self) -> Task:
        """Create the RAG task with its associated tools.

        The task is configured from YAML and is equipped with a web search
        tool and a custom context-fetching tool to support RAG workflows.

        Returns
        -------
        Task
            The task instance configured under the key ``"rag_task"`` in
            `tasks_config`.
        """
        return Task(
            config=self.tasks_config["rag_task"],  # type: ignore[index]
            tools=[SerperDevTool(), FetchContextsOutput()],
        )

    @crew
    def crew(self) -> Crew:
        """Create the crew that runs the agent and task sequentially.

        Returns
        -------
        Crew
            A crew that executes the configured agent and task using a
            sequential process with verbose logging enabled.
        """
        # To learn how to add knowledge sources to your crew, check out the documentation:
        # https://docs.crewai.com/concepts/knowledge#what-is-knowledge

        return Crew(
            agents=self.agents,  # Automatically created by the @agent decorator
            tasks=self.tasks,  # Automatically created by the @task decorator
            process=Process.sequential,
            verbose=True,
        )
